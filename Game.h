#pragma once
#include <vector>
#include <unordered_map>
#include "Piece.h"
#include "Move.h"

#define WK_CASTLE 0b10000000
#define WQR_CASTLE 0b01000000
#define WKR_CASTLE 0b00100000
#define BK_CASTLE 0b00000100
#define BQR_CASTLE 0b00000010
#define BKR_CASTLE 0b00000001
typedef unsigned long long ull;

class Game
{
	private:
		// bitboards of all possible moves
		uint64_t whitePawnPushes[64] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
			0x1010000, 0x2020000, 0x4040000, 0x8080000, 0x10100000, 0x20200000, 
			0x40400000, 0x80800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 
			0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x100000000, 0x200000000,
			0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 
			0x8000000000, 0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 
			0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000, 0x1000000000000,
			0x2000000000000, 0x4000000000000, 0x8000000000000, 0x10000000000000, 
			0x20000000000000, 0x40000000000000, 0x80000000000000, 0x100000000000000, 
			0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 
			0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
		uint64_t whitePawnAttacks[64] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
			0x20000, 0x50000, 0xa0000, 0x140000, 0x280000, 0x500000, 0xa00000, 
			0x400000, 0x2000000, 0x5000000, 0xa000000, 0x14000000, 0x28000000,
			0x50000000, 0xa0000000, 0x40000000, 0x200000000, 0x500000000, 
			0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000, 
			0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000, 
			0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000, 0x2000000000000, 
			0x5000000000000, 0xa000000000000, 0x14000000000000, 0x28000000000000, 
			0x50000000000000, 0xa0000000000000, 0x40000000000000, 0x200000000000000,
			0x500000000000000, 0xa00000000000000, 0x1400000000000000, 0x2800000000000000,
			0x5000000000000000, 0xa000000000000000, 0x4000000000000000,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
		uint64_t blackPawnPushes[64] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
			0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 
			0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000, 0x40000, 0x80000, 
			0x100000, 0x200000, 0x400000, 0x800000, 0x1000000, 0x2000000, 0x4000000, 
			0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x100000000, 
			0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 
			0x4000000000, 0x8000000000, 0x10100000000, 0x20200000000, 0x40400000000, 
			0x80800000000, 0x101000000000, 0x202000000000, 0x404000000000, 0x808000000000,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
		uint64_t blackPawnAttacks[64] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
			0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40, 0x200, 0x500, 0xa00, 0x1400, 
			0x2800, 0x5000, 0xa000, 0x4000, 0x20000, 0x50000, 0xa0000, 0x140000, 0x280000,
			0x500000, 0xa00000, 0x400000, 0x2000000, 0x5000000, 0xa000000, 0x14000000, 
			0x28000000, 0x50000000, 0xa0000000, 0x40000000, 0x200000000, 0x500000000, 
			0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 0xa000000000, 
			0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000, 
			0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000, 
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
		uint64_t knightMoves[64] = { 0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 
			0xa01000, 0x402000, 0x2040004, 0x5080008, 0xa110011, 0x14220022, 0x28440044, 
			0x50880088, 0xa0100010, 0x40200020, 0x204000402, 0x508000805, 0xa1100110a, 0x1422002214, 
			0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040, 0x20400040200, 0x50800080500, 
			0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000,
			0x402000204000, 0x2040004020000, 0x5080008050000, 0xa1100110a0000, 0x14220022140000,
			0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000, 0x204000402000000,
			0x508000805000000, 0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 
			0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000, 0x400040200000000, 
			0x800080500000000, 0x1000110a00000000, 0x2000221400000000, 0x4000442800000000, 
			0x8000885000000000, 0x10a000000000, 0x204000000000, 0x4020000000000, 0x8050000000000, 
			0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000, };
		enum DIR {
			NORTH,
			NORTHEAST,
			EAST,
			SOUTHEAST,
			SOUTH,
			SOUTHWEST,
			WEST,
			NORTHWEST
		};
	public:
		std::vector<Piece*> piecesOnBoard;
		uint8_t board[8][8] = {0};
		int whiteAttack[8][8] = { 0 }; // the squares white controls
		int blackAttack[8][8] = { 0 }; // the squares black controls
		std::unordered_map<std::string,int> positions;
		std::vector<std::string> fens;
		int turn = 0;
		int halfmoves = 0;
		bool whiteKingsideRookCanCastle = true;
		bool whiteQueensideRookCanCastle = true;
		bool whiteKingCanCastle = true;
		bool blackKingsideRookCanCastle = true;
		bool blackQueensideRookCanCastle = true;
		bool blackKingCanCastle = true;

		Piece* makePiece(int x, int y, uint8_t info);
		bool isInCheck(uint8_t gameBoard[][8], int turn, int kingX, int kingY);
		void updateAttackBoard();
		Move* validMove(Piece* piece, int oldX, int oldY, int newX, int newY, bool test = false);
		bool validCastle(Piece* piece, int initX, int initY, int kingX, int kingY);
		void makeMove(Move* move);
		void unmakeMove(Move* move);
		ull generateLegalMoves(std::vector<Move*>& moves);
		int isCheckmate(int turn);
		int oldIsCheckmate(int turn);
		bool insufficientMaterial();
		std::string getFEN();
		void buildFromFEN(std::string fen);
		void printBoard();
		ull perft(int depth /* assuming >= 1 */);
		ull perftCaps(int depth, bool hasCapture);

		~Game();
};